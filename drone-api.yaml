openapi: 3.0.0
info:
  title: Drone Flight Operations API
  description: API for accessing data about drones.
  version: 1.0.0

servers:
  - url: http://localhost:5000/api/
    description: Local Development Server

paths:
  /drones:
    get:
      tags:
        - Drones
      summary: Retrieve all drones
      responses:
        "200":
          description: A list of drones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drone"
    post:
      tags:
        - Drones
      summary: Add a new drone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drone"
      responses:
        "201":
          description: Drone created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drone"
        "500":
          description: Failed to create drone
  /drones/{buno_id}:
    get:
      tags:
        - Drones
      summary: Retrieve a drone by ID
      parameters:
        - in: path
          name: buno_id
          schema:
            type: string
          required: true
          description: BUNO_ID of the drone to retrieve
      responses:
        "200":
          description: A drone object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drone"
        "404":
          description: Drone not found
    put:
      tags:
        - Drones
      summary: Update a drone by ID
      parameters:
        - in: path
          name: buno_id
          schema:
            type: string
          required: true
          description: BUNO_ID of the drone to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Drone"
      responses:
        "200":
          description: Drone updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drone"
        "404":
          description: Drone not found
    delete:
      tags:
        - Drones
      summary: Delete a drone by ID
      parameters:
        - in: path
          name: buno_id
          schema:
            type: string
          required: true
          description: BUNO_ID of the drone to delete
      responses:
        "200":
          description: Drone deleted successfully
        "404":
          description: Drone not found
  /routes:
    get:
      tags: 
        - Routes  # Added tag here
      summary: Retrieve a list of all routes
      responses:
        "200":
          description: A list of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        "500":
          description: Failed to fetch routes
    post:
      tags:
        - Routes  # Added tag here
      summary: Add a new route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        "201":
          description: Route added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        "500":
          description: Failed to add route
  /routes/{route_id}:
    get:
      tags:
        - Routes  # Added tag here
      summary: Retrieve a specific route by its ID
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A route object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        "404":
          description: Route not found
        "500":
          description: Failed to fetch route
    put:
      tags:
        - Routes  # Added tag here
      summary: Update an existing route by its ID
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        "200":
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        "404":
          description: Route not found
        "500":
          description: Failed to update route
    delete:
      tags:
        - Routes  # Added tag here
      summary: Delete a specific route by its ID
      parameters:
        - in: path
          name: route_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Route deleted successfully
        "404":
          description: Route not found
        "500":
          description: Failed to delete route
  /connection:  # Moved this path to the end
    get:
      tags:
        - Connection
      summary: Test the database connection
      responses:
        "200":
          description: Connection status message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully connected to the API

components:
  schemas:
    Drone:
      type: object
      properties:
        BUNO_ID:
          type: string
          description: Unique identifier for the drone
        Drone_Model:
          type: string
          description: Model of the drone
        Manufacturer:
          type: string
          description: Manufacturer of the drone
        Purchase_Date:
          type: string
          format: date
          description: Date the drone was purchased
        Serial:
          type: integer
          description: Serial number of the drone
        Status:
          type: string
          description: Current status of the drone (e.g., Active, Maintenance)
        Status_Code:
          type: string
          description: Status code for the drone (e.g., OK, MAINT)
      example:
        BUNO_ID: DR-001
        Drone_Model: DJI Phantom 4 Pro
        Manufacturer: DJI Innovations
        Purchase_Date: "2022-05-20"
        Serial: 23456
        Status: Active
        Status_Code: OK
    Route:
      type: object
      properties:
        Route_ID:
          type: string
        Latitude:
          type: number
          format: float
        Longitude:
          type: number
          format: float
        # Add more properties as needed (e.g., Start_Point, End_Point, Waypoints)