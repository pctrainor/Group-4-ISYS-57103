from flask import Blueprint, jsonify, request
from . import model  # Assuming you have a model.py with a Pilot class defined

# Create the blueprint
api_bp = Blueprint('api', __name__)

@api_bp.route('/pilots', methods=['GET', 'POST'])
def get_or_create_pilots():
    if request.method == 'GET':
        # 1. Connect to your database (using SQLAlchemy or similar)
        # Example using SQLAlchemy (replace with your actual setup):
        # from . import db  # Assuming you have a db object initialized
        # pilots = db.session.query(model.Pilot).all()

        # --- Example using in-memory data (replace with database retrieval) ---
        pilot_data = [
            {"Pilot_ID": "PILOT-001", "Pilot_Current": True, "Pilot_Hours": 1000},
            {"Pilot_ID": "PILOT-002", "Pilot_Current": False, "Pilot_Hours": 500},
            # ... other pilot data ...
        ]
        pilots = [model.Pilot(**data) for data in pilot_data]
        # --- End of example ---

        # Apply limit if provided in the request arguments
        limit = request.args.get('limit', type=int)
        if limit:
            pilots = pilots[:limit]

        pilot_list = [pilot.__dict__ for pilot in pilots]
        return jsonify(pilot_list)

    if request.method == 'POST':
        # Get the pilot data from the request body
        data = request.get_json()

        # Create a new Pilot object
        new_pilot = model.Pilot(**data)

        # ... your code to save the new pilot to the database ...

        return jsonify(new_pilot.__dict__), 201  # 201 Created


@api_bp.route('/pilots/<pilot_id>', methods=['GET', 'PUT', 'DELETE'])
def get_update_or_delete_pilot(pilot_id):
    # --- Example using in-memory data (replace with database retrieval) ---
    pilot_data = [
        {"Pilot_ID": "PILOT-001", "Pilot_Current": True, "Pilot_Hours": 1000},
        {"Pilot_ID": "PILOT-002", "Pilot_Current": False, "Pilot_Hours": 500},
        # ... other pilot data ...
    ]
    pilots = [model.Pilot(**data) for data in pilot_data]
    # --- End of example ---

    if request.method == 'GET':
        # 1. Connect to your database (if not already connected)

        # 2. Fetch the pilot with the given pilot_id from the database
        # Example using SQLAlchemy:
        # from . import db
        # pilot = db.session.query(model.Pilot).filter_by(Pilot_ID=pilot_id).first()

        pilot = next((p for p in pilots if p.Pilot_ID == pilot_id), None)

        if pilot:
            return jsonify(pilot.__dict__)
        else:
            return jsonify({'error': 'Pilot not found'}), 404

    if request.method == 'PUT':
        # Get the updated pilot data from the request body
        data = request.get_json()

        # ... your code to update the pilot with the given pilot_id in the database ...
        pilot = next((p for p in pilots if p.Pilot_ID == pilot_id), None)
        if pilot:
            # Update the pilot object with the new data (example)
            pilot.Pilot_Current = data.get('Pilot_Current', pilot.Pilot_Current)
            pilot.Pilot_Hours = data.get('Pilot_Hours', pilot.Pilot_Hours)
            return jsonify({'message': f'Pilot {pilot_id} updated'}), 200
        else:
            return jsonify({'error': 'Pilot not found'}), 404


    if request.method == 'DELETE':
        # ... your code to delete the pilot with the given pilot_id from the database ...
        try:
            # Find the index of the pilot to delete
            index = next((i for i, p in enumerate(pilots) if p.Pilot_ID == pilot_id), None)

            if index is not None:
                # Delete the pilot from the list
                del pilots[index]
                return jsonify({'message': f'Pilot {pilot_id} deleted'}), 204  # 204 No Content
            else:
                return jsonify({'error': 'Pilot not found'}), 404
        except Exception as e:
            return jsonify({'error': str(e)}), 500